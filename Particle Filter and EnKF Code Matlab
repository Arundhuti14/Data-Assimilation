% Cleaned and Commented Data Assimilation Code for State Estimation
clear all; 
format short;

% Simulation Parameters
tc = 100;        % Total simulation time
stp = 85;        % Stop time for assimilation
mu = 1;          % Initial estimate of the damping coefficient
true_mu = 2;     % True value of the damping coefficient
X0 = [0.1; 0.1; true_mu]; % True initial state
x0 = [0.1; 0.1; mu];      % Initial state estimate
tspan = 0:0.01:tc;  % Time span for ODE solver
H = [1 0 0; 0 1 0]; % Observation matrix

% Number of state variables and measurements
m = 3;  % Number of state variables
n = 2;  % Number of measurements

% Simulate the true system
[tr, xr] = ode45(@VanderPolt, tspan, X0);
truth = cat(2, tspan', xr);

% Variance and measurement error
sigma1 = 0.1;  % Variance of x
sigma2 = 0.1;  % Variance of y
sigma3 = 0.09; % Variance of mu
R = 0.01;      % Measurement error variance
mem = 5000;    % Number of ensemble members
dt = 1;        % Sampling frequency

% Initialize matrices to store results
Ut = [];
U = [];

% Generate synthetic observations
for t = dt:dt:tc
    y = xr(floor(t*100+1), 1:2) + sqrtm(R)*randn(1, 2); % Add noise to true values
    ut = xr(floor(t*100+1), :); % True values at current time
    Ut = [Ut; ut];
    U = [U; y];
end

% Load ensemble initial conditions from file
myf3 = 'C:\Users\arundhutibaner\Documents\MATLAB\Manuscript';
files3 = dir(fullfile(myf3, 'initial.txt'));
dm = dlmread(fullfile(myf3, files3(1).name));
x0_en = dm; % Ensemble initial conditions

% Perturb the initial ensemble for mu
pert03 = randn(mem, 1) * sqrt(sigma3);
x0_en(:, 3) = mu + pert03; % Perturb initial value of mu

fixed_x0_en = x0_en; % Store fixed initial ensemble

% Plot the initial distributions of the state variables and parameter
figure(1)
subplot(131)
hist(fixed_x0_en(:, 1), mem)
ylabel('Frequency')
title('Distribution of x0')

subplot(132)
hist(fixed_x0_en(:, 2), mem)
ylabel('Frequency')
title('Distribution of y0')

subplot(133)
hist(fixed_x0_en(:, 3), mem)
ylabel('Frequency')
title('Distribution of mu0')

% Initialize storage for data assimilation results
pri_var = [];
analy_mean = [];
x_mean = []; 
SSS1 = []; 
SSS2 = []; 
SSS3 = [];
XF1 = [];
XF2 = [];
XF3 = [];
YO1 = [];
YO2 = [];
x_mean2 = [];
times = [];
INDD = [];
Xa1 = [];
Xa2 = [];
Xa3 = [];

% Main Data Assimilation Loop
for t = dt:dt:tc
    x_f = [];
    s = 0;
    SS1 = [];
    SS2 = [];   
    SS3 = [];
    
    for i = 1:mem 
        XX = x0_en(i, :)'; 
        tspan = (t-dt):0.01:t;
        [tt, X] = ode45(@VanderPol, tspan, XX); % Forecast State
        s = s + X; 
        x_f = [x_f; X(end, :)];
        SS1 = [SS1; X(1:end, 1)'];
        SS2 = [SS2; X(1:end, 2)'];
        SS3 = [SS3; X(1:end, 3)'];
    end
    
    % Store results from each time step
    SSS1 = [SSS1 SS1(:, 1:end-1)];
    SSS2 = [SSS2 SS2(:, 1:end-1)];
    SSS3 = [SSS3 SS3(:, 1:end-1)];
    XF1 = [XF1 x_f(:, 1)];
    XF2 = [XF2 x_f(:, 2)];
    XF3 = [XF3 x_f(:, 3)];
    meanx = s / mem;
    x_mean = [x_mean; s(1:end-1, :) / mem]; % Forecast Ensemble Mean
    t0 = mean(x_f);  
    
    % Calculate background error covariance
    t1 = [x_f(:, 1) - t0(1), x_f(:, 2) - t0(2), x_f(:, 3) - t0(3)];  
    B = t1' * t1 / (mem - 1);  % Covariance error matrix

    if t == dt
        backgroundB = B; % Store background covariance at the first step
    end  
    
    % Inflate the ensemble spread
    r = 1.1;
    for i = 1:mem
        x_f(i, :) = r * (x_f(i, :) - mean(x_f(i, :))) + mean(x_f(i, :));
    end 

    % Store prior variance
    Bx = B(1, 1);
    By = B(2, 2);
    pri_var = [pri_var; Bx By];
    
    % Load synthetic observations
    files3 = dir(fullfile(myf3, 'per_obs1.txt'));
    dm1 = dlmread(fullfile(myf3, files3(1).name));
    files3 = dir(fullfile(myf3, 'per_obs2.txt'));
    dm2 = dlmread(fullfile(myf3, files3(1).name));
    yo = [dm1(:, tv), dm2(:, tv)];
    
    % Observation error covariance
    t2 = [yo' * yo / (mem - 1)];
    
    % Compute Kalman gain
    K = B * H' / (H * B * H' + t2);  
    
    % Update ensemble with observations (Analysis Step)
    xa = x_f' + K * (yo' - H * x_f'); 
    xa = xa'; 

    % Optionally stop updates after a certain time
    if t > stp
        xa = x_f;
    end
    
    % Store analysis results
    Xa1 = [Xa1 xa(:, 1)];
    Xa2 = [Xa2 xa(:, 2)];
    Xa3 = [Xa3 xa(:, 3)];
    x0_en = xa;

    % Calculate analysis mean
    Emean = mean(xa);
    analy_mean = [analy_mean; Emean];
    
    tv = tv + 1;
end

% Finalize storage of results
x_mean = [x_mean; s(end, :) / mem];
SSS1 = [SSS1 SS1(:, end)];
SSS2 = [SSS2 SS2(:, end)];
SSS3 = [SSS3 SS3(:, end)];

% Save initial conditions to a file
dlmwrite('initial_mu_1.txt', fixed_x0_en);

% Plot Empirical PDFs for the state variables and parameter
figure(2);
subplot(3, 1, 1)
ind = find(TIME(:, 1) == stp);
[fq, xq] = ksdensity(X_A1(:, ind));
plot(xq, fq, 'b-'); hold on;
[fq, xq] = ksdensity(PSSS1(:, ind));
plot(xq, fq, 'r-');
tmp = get(gca, 'ylim');
plot([Ut(ind, 1) Ut(ind, 1)], tmp * 2, 'k-');
set(gca, 'ylim', tmp);
hold off;
legend('Posterior', 'Prior');
title('Empirical PDF of p(\psi | y_{1:T})')

subplot(3, 1, 2)
[fq, xq] = ksdensity(X_A2(:, ind));
plot(xq, fq, 'b-'); hold on;
[fq, xq] = ksdensity(PSSS2(:, ind));
plot(xq, fq, 'r-');
tmp = get(gca, 'ylim');
plot([Ut(ind, 2) Ut(ind, 2)], tmp * 2, 'k-');
set(gca, 'ylim', tmp);
hold off;
legend('Posterior', 'Prior');
title('Empirical PDF of p(\eta | y_{1:T})')

subplot(3, 1, 3)
[fq, xq] = ksdensity(X_A3(:, ind));
plot(xq, fq, 'b-'); hold on;
[fq, xq] = ksdensity(PSSS3(:, ind));
plot(xq, fq, 'r-');
tmp = get(gca, 'ylim');
plot([Ut(ind, 3) Ut(ind, 3)], tmp * 2, 'k-');
set(gca, 'ylim', tmp);
hold off;
legend('Posterior', 'Prior');
title('Empirical PDF of p(\mu | y_{1:T})')
